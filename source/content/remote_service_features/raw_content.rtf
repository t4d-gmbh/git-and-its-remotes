{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\fswiss\fcharset0 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37900\viewh19880\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\fs28 Git Course \'97 Part 2
\fs24 \
\
\
(Git features vs remote services)\
\
\

\f1\b\fs26 \ul Introduction (or overview)
\f0\b0\fs24 \ulnone \
\

\f2\i Text
\f0\i0 \
\
As we discussed in Part 1, Git is a distributed version control system (VCS) that manages and tracks change in codebases 
\f1\b located locally
\f0\b0  (i.e. on your machine). Git is not to be  confused with GitHub and GitLab, which, in turn, are remote hosting web-based platforms that 
\f2\i use Git
\f0\i0  to offer services to store and collaborate on code 
\f1\b remotely.
\f0\b0 \
\
In this section, we will go over the key features of remote services \
\

\f2\i Slides
\f0\i0 \
\
Reminder: Git =/ git-based remote hosting services\
\
Git = version control system (VCS) to 
\f1\b locally
\f0\b0  manage and track coding changes\
\
Git-based remote services (e.g. GitHub, GitLab) = web-based platforms that offer services to store and facilitate collaborative coding projects, using the underlying version control tools offered by Git.\
\
\
Overview:\
- Remote features:\
	- Issues\
	- Milestones\
	- Merge/pull requests\
\
\
\

\f1\b\fs26 \ul Remote services \'97 Key Features
\f0\b0 \

\fs24 \ulnone \

\f2\i Text\

\f0\i0 \
Remote services like GitHub or GitLab offer a range of features that extend beyond basic Git functionalities, making project management, collaborations and automation that much easier. On e  \
\
\
\
\
\

\f2\i Slides\
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\'97\
\
What is an Issue?
\f0\i0 \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 Issues allow to track tasks, bugs and any kind of work that needs to be done in a project. Useful in project management, especially in collaborative projects involving multiple developers or an entire community because it allows to track all the changes pertaining to a task . Issue-tracking is a feature of platforms such as GitHub and GitLab that offer, and not a Git concept in itself\
\
Different types of issues:\
- Bug\
- Feature requests\
- Tasks\
- Documentation\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\

\f2\i What are the key properties of an issue and why are they useful for in collaborative project management?
\f0\i0 \
\
1. Description: Each issue has a title and a a description section that outline the problem (expected and actual behaviour), task (e.g. steps to reproduce), or an enhancement (e.g. a new feature, potential ideas or solutions to fix a bug) to be made. \
\
2. Assignees: Issues can be assigned to specific team members to clarify tasks and responsibilities and facilitate project management. \
\
3. State: to track progress on an issue, they can have descriptive states like \'93open\'94 (still to be resolved) and \'93closed\'94 (issue has been resolved), or anything in between like \'93in progress\'94.\
\
4. Labels: Issues can be categorised using labels, e.g. \'93bug\'94, \'93documentation\'94, etc., to help organise and prioritise work.\
\
5. Comments: Team members can discuss an issue in a comment thread to offer insights, feedback, exchange ideas in how to resolve an issue.\
\
6. Milestones: Issues can be grouped under specific milestones and follow the overarching structure of a project, e.g. timeline towards objectives, new version release. \
\
\

\f2\i How to manage issues? Exemplary workflow
\f0\i0 \
\
1. 
\f1\b Open an issue
\f0\b0 : Person 1 (team member, community user) notices a bug or wants to propose a new feature and opens an issue with a compelling title and a detailed description. \
\
2. 
\f1\b Discussion
\f0\b0 : Other team members or users discuss potential fixes or features in the comments\
\
3. 
\f1\b Assign & Work
\f0\b0 : someone is assigned (or assign themselves) the issue, and they start working on it in a Git branch. \
\
4. 
\f1\b Comment & Link
\f0\b0 : When they push commits, they link them to the issue using commit messages\
\
5. 
\f1\b Close the issue
\f0\b0 : Once the code is reviewed and merged, the issue is closed. \
\
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\'97\

\f2\i \
What are merge (pull) requests?
\f0\i0 \
\
\
\

\f2\i What are the key properties?
\f0\i0 \
\
\
\
\'97\'97\'97\
\

\f2\i What is a project vs hierarchical \'85?
\f0\i0 \
\
\

\f2\i  \

\f1\i0\b \
\
\

\fs26 \
\
}